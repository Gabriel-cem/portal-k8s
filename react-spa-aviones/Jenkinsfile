pipeline {
  agent {
    kubernetes {
      yaml '''
        apiVersion: v1
        kind: Pod
        spec:
          containers:
          - name: node
            image: node:18-alpine
            command:
            - cat
            tty: true
          - name: docker
            image: docker:latest
            command:
            - cat
            tty: true
            volumeMounts:
             - mountPath: /var/run/docker.sock
               name: docker-sock
          volumes:
          - name: docker-sock
            hostPath:
              path: /var/run/docker.sock    
      '''
    }
  }

  environment {
    IMAGE_REPO = "gab741/portal-aviones"
  }

  stages {
    stage('Checkout') {
      steps {
        container('node') {
          dir('react-spa-aviones') {
            checkout scm
          }
        }
      }
    }

    stage('Build-React-App') {
      steps {
        container('node') {
          dir('react-spa-aviones') {
            sh 'npm install'
            sh 'npm run build'
          }
        }
      }
    }

    stage('Build-Docker-Image') {
      steps {
        container('docker') {
          dir('react-spa-aviones') {
            script {
              def shortCommit = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
              def tag = "build-${env.BUILD_NUMBER}-${shortCommit}"
              env.IMAGE_TAG = "${IMAGE_REPO}:${tag}"
              env.IMAGE_LATEST = "${IMAGE_REPO}:latest"

              echo "Building Docker image with tags: ${env.IMAGE_TAG} and ${env.IMAGE_LATEST}"
              sh "docker build -t ${env.IMAGE_TAG} -t ${env.IMAGE_LATEST} ."
            }
          }
        }
      }
    }

    stage('Login-to-DockerHub') {
      steps {
        container('docker') {
          withCredentials([usernamePassword(credentialsId: 'docker', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
            sh 'docker login -u $DOCKER_USER -p $DOCKER_PASS'
          }
        }
      }
    }

    stage('Push-Docker-Images') {
      steps {
        container('docker') {
          sh "docker push ${env.IMAGE_TAG}"
          sh "docker push ${env.IMAGE_LATEST}"
        }
      }
    }
  }

  post {
    always {
      container('docker') {
        sh 'docker logout'
      }
    }
  }
}
